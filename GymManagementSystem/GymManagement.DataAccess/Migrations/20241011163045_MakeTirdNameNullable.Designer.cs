// <auto-generated />
using System;
using GymManagement.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymManagement.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241011163045_MakeTirdNameNullable")]
    partial class MakeTirdNameNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymManagement.BusinessCore.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.ExerciseType", b =>
                {
                    b.Property<byte>("ExerciseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("ExerciseTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("ExerciseTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ExerciseTypeId");

                    b.ToTable("tbExerciseTypes", (string)null);
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Job", b =>
                {
                    b.Property<byte>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("JobID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("JobId"));

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("jobTitle");

                    b.HasKey("JobId");

                    b.ToTable("tbJobs", (string)null);
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.JobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmpoyeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmpoyeeID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<byte>("JobId")
                        .HasColumnType("tinyint")
                        .HasColumnName("JobID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmpoyeeId");

                    b.HasIndex("JobId");

                    b.ToTable("tbJobHistories", (string)null);
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.PayrollPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("Amount");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("paymentDate");

                    b.HasKey("PaymentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("tbPayroll_payments", (string)null);
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Period", b =>
                {
                    b.Property<byte>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("PeriodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("PeriodId"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(0)");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(0)");

                    b.HasKey("PeriodId");

                    b.ToTable("tbPeriods", (string)null);
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NationalNumber");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("RegisterationDate")
                        .HasColumnType("date");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ThirdName")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "UniqueEmail")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "NationalNumber" }, "UniqueNationalNumber")
                        .IsUnique()
                        .HasFilter("[NationalNumber] IS NOT NULL");

                    b.HasIndex(new[] { "PhoneNumber" }, "UniquePhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("tbPerson", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<int?>("CoachId")
                        .HasColumnType("int")
                        .HasColumnName("CoachID");

                    b.Property<int>("CreatedByReceptionistId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByReceptionistID");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<byte>("ExcerciseTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ExcerciseTypeID");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<byte>("PeriodId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PeriodID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<byte>("SubscriptionPeriodId")
                        .HasColumnType("tinyint")
                        .HasColumnName("SubscriptionPeriodID");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("CoachId");

                    b.HasIndex("CreatedByReceptionistId");

                    b.HasIndex("ExcerciseTypeId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("SubscriptionPeriodId");

                    b.ToTable("tbSubscriptions", (string)null);
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.SubscriptionPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByUserID");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("smallmoney");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    b.HasKey("PaymentId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("tbSubscriptionPayments", (string)null);
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.SubscriptionPeriod", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("PeriodDays")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Price")
                        .HasColumnType("smallmoney");

                    b.HasKey("Id");

                    b.ToTable("tbSubsciptionPeriods", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Employee", b =>
                {
                    b.HasBaseType("GymManagement.BusinessCore.Models.Person");

                    b.Property<byte?>("JobID")
                        .HasColumnType("tinyint")
                        .HasColumnName("CurrentJob");

                    b.Property<DateTime?>("ResignationDate")
                        .HasColumnType("date")
                        .HasColumnName("ResignationDate");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.HasIndex("JobID");

                    b.ToTable("tbEmployees", (string)null);
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Member", b =>
                {
                    b.HasBaseType("GymManagement.BusinessCore.Models.Person");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<decimal?>("MemberWeight")
                        .HasColumnType("decimal(5, 2)");

                    b.ToTable("tbMembers", (string)null);
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.AppUser", b =>
                {
                    b.HasOne("GymManagement.BusinessCore.Models.Person", "Person")
                        .WithOne()
                        .HasForeignKey("GymManagement.BusinessCore.Models.AppUser", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.JobHistory", b =>
                {
                    b.HasOne("GymManagement.BusinessCore.Models.Employee", "Employee")
                        .WithMany("EmployeementHistory")
                        .HasForeignKey("EmpoyeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tbJobHistories_tbEmployees");

                    b.HasOne("GymManagement.BusinessCore.Models.Job", "Job")
                        .WithMany("JobHistories")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tbJobHistories_tbJobs");

                    b.Navigation("Employee");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.PayrollPayment", b =>
                {
                    b.HasOne("GymManagement.BusinessCore.Models.Employee", "Employee")
                        .WithMany("PayrollPayments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payroll_payments");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Subscription", b =>
                {
                    b.HasOne("GymManagement.BusinessCore.Models.JobHistory", "Coach")
                        .WithMany("SubscriptionCoaches")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_tbSubscriptions_tbJobHistories_Coach");

                    b.HasOne("GymManagement.BusinessCore.Models.JobHistory", "CreatedByReceptionist")
                        .WithMany("SubscriptionCreatedByReceptionists")
                        .HasForeignKey("CreatedByReceptionistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tbSubscriptions_tbJobHistoriesRecep");

                    b.HasOne("GymManagement.BusinessCore.Models.ExerciseType", "ExcerciseType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ExcerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tbSubscriptions_tbExerciseType");

                    b.HasOne("GymManagement.BusinessCore.Models.Member", "Member")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tbSubscriptions_tbMember");

                    b.HasOne("GymManagement.BusinessCore.Models.Period", "Period")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tbSubscriptions_tbPeriod");

                    b.HasOne("GymManagement.BusinessCore.Models.SubscriptionPeriod", "SubscriptionPeriod")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tbSubscriptions_tbSubscriptionPeriod");

                    b.Navigation("Coach");

                    b.Navigation("CreatedByReceptionist");

                    b.Navigation("ExcerciseType");

                    b.Navigation("Member");

                    b.Navigation("Period");

                    b.Navigation("SubscriptionPeriod");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.SubscriptionPayment", b =>
                {
                    b.HasOne("GymManagement.BusinessCore.Models.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tbSubscriptionPayments_AspNetUsers");

                    b.HasOne("GymManagement.BusinessCore.Models.Subscription", "Subscription")
                        .WithOne("SubscriptionPayment")
                        .HasForeignKey("GymManagement.BusinessCore.Models.SubscriptionPayment", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tbSubscriptions_tbSubscriptionPayments");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GymManagement.BusinessCore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GymManagement.BusinessCore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagement.BusinessCore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GymManagement.BusinessCore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Employee", b =>
                {
                    b.HasOne("GymManagement.BusinessCore.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("GymManagement.BusinessCore.Models.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagement.BusinessCore.Models.Job", "CurrentJob")
                        .WithMany("Employees")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Employees_Jobs");

                    b.Navigation("CurrentJob");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Member", b =>
                {
                    b.HasOne("GymManagement.BusinessCore.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("GymManagement.BusinessCore.Models.Member", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.ExerciseType", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Job", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("JobHistories");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.JobHistory", b =>
                {
                    b.Navigation("SubscriptionCoaches");

                    b.Navigation("SubscriptionCreatedByReceptionists");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Period", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Subscription", b =>
                {
                    b.Navigation("SubscriptionPayment");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.SubscriptionPeriod", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Employee", b =>
                {
                    b.Navigation("EmployeementHistory");

                    b.Navigation("PayrollPayments");
                });

            modelBuilder.Entity("GymManagement.BusinessCore.Models.Member", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
